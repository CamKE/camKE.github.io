{
  "api/Global.Cell.CellStatus.html": {
    "href": "api/Global.Cell.CellStatus.html",
    "title": "Enum Cell.CellStatus | Project documentation",
    "keywords": "Enum Cell.CellStatus Enumeration of cell states. Used to distinguish the various cells from eachother. Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum CellStatus Fields Name Description InvalidCell LakeCell RiverCell TerrainCell ValidCell WalkpathCell"
  },
  "api/Global.Cell.html": {
    "href": "api/Global.Cell.html",
    "title": "Class Cell | Project documentation",
    "keywords": "Class Cell Represents a single space on the map for a tile to be potentially placed. Inheritance Object Cell Implements IHeapItem < Cell > IComparable < Cell > Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Cell : IHeapItem<Cell> Constructors Cell(Vector3Int, Cell.CellStatus) Constructor for Cell. Must set an initial postions and status. Declaration public Cell(Vector3Int position, Cell.CellStatus status = Cell.CellStatus.ValidCell) Parameters Type Name Description Vector3Int position The position of the cell on the Map, including its depth (z). Cell.CellStatus status Denotes the cells current state. Fields gCost The cost of traversal between the start cell and the cell. Declaration public int gCost Field Value Type Description Int32 hCost The estimated cost of traversal from the cell to the end goal cell. Declaration public int hCost Field Value Type Description Int32 isTraversable Denotes whether the cell is able to be travelled across. Declaration public bool isTraversable Field Value Type Description Boolean isWaterBound Denotes whether the cell is a water boundary; that is , if the cell is adjacent to water. Declaration public bool isWaterBound Field Value Type Description Boolean onBoundary Denotes whether the cell is on the boundary; that is, if the cell neighours an invalid cell or is at the end of the map. Declaration public bool onBoundary Field Value Type Description Boolean parent The parent of the current cell. Used for path generation. Declaration public Cell parent Field Value Type Description Cell position The position of the cell on the Map, including its depth (z). Declaration public Vector3Int position Field Value Type Description Vector3Int status Denotes the cells current state. Declaration public Cell.CellStatus status Field Value Type Description Cell.CellStatus Properties HeapIndex Getter and setter for the heap index. Declaration public int HeapIndex { get; set; } Property Value Type Description Int32 Methods CompareTo(Cell) Used to order cells in the heap based on lowest fCost or hCost first. Used during path generation. Declaration public int CompareTo(Cell otherCell) Parameters Type Name Description Cell otherCell The cell to compare to. Returns Type Description Int32 The priority of the cell relative to the other cell. -1 for lower priority, 0 for same priority, and 1 for higher priority. fCost() Calculates the f cost, which is a sum of the g cost and h cost. Declaration public int fCost() Returns Type Description Int32 The f cost. setCellStatus(Cell.CellStatus, Boolean) Sets the cell's status to a new status. Declaration public void setCellStatus(Cell.CellStatus newStatus, bool intersectionsEnabled = false) Parameters Type Name Description Cell.CellStatus newStatus The new status to set the cell to. Boolean intersectionsEnabled Whether intersections are enabled. For path generation. Optional parameter. Implements IHeapItem<T> IComparable<>"
  },
  "api/Global.CellPair.html": {
    "href": "api/Global.CellPair.html",
    "title": "Class CellPair | Project documentation",
    "keywords": "Class CellPair Represents the start and end cell of a path. Inheritance Object CellPair Implements IHeapItem < CellPair > IComparable < CellPair > Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CellPair : IHeapItem<CellPair> Constructors CellPair(Cell, Cell, Int32) Constructor for the CellPair. Distance is optional. Declaration public CellPair(Cell startCell, Cell endCell, int distance = 0) Parameters Type Name Description Cell startCell The start cell of the path. Cell endCell The end cell of the path. Int32 distance The distance between the start and end cells. Fields endCell The end cell of the path. Declaration public readonly Cell endCell Field Value Type Description Cell startCell The start cell of the path. Declaration public readonly Cell startCell Field Value Type Description Cell Properties HeapIndex Getter and setter for the heap index. Declaration public int HeapIndex { get; set; } Property Value Type Description Int32 Methods CompareTo(CellPair) Used to order the CellPairs in the heap based on the lowest distance first. Declaration public int CompareTo(CellPair otherCell) Parameters Type Name Description CellPair otherCell The cell to compare to. Returns Type Description Int32 Implements IHeapItem<T> IComparable<>"
  },
  "api/Global.Heap-1.html": {
    "href": "api/Global.Heap-1.html",
    "title": "Class Heap<T> | Project documentation",
    "keywords": "Class Heap<T> A binary heap written by Sebastian Lague. Heap video Inheritance Object Heap<T> Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Heap<T> where T : IHeapItem<T> Type Parameters Name Description T The type of object to be sorted in the heap. Constructors Heap(Int32) Constructor taking in the max size of the heap. Declaration public Heap(int maxHeapSize) Parameters Type Name Description Int32 maxHeapSize The maxiumum possible size of the heap. Properties Count Gets the number of items in the heap. Declaration public int Count { get; } Property Value Type Description Int32 Methods Add(T) Adds a new item to the heap and sorts it. Declaration public void Add(T item) Parameters Type Name Description T item The item to be added to the heap. Contains(T) Checks if the given item is in the heap. Declaration public bool Contains(T item) Parameters Type Name Description T item The item to find. Returns Type Description Boolean True if the item is in the heap, false if it is not. getItem(Int32) Retrieve an item from the heap at the given index. Declaration public T getItem(int index) Parameters Type Name Description Int32 index The index position of the item to retrieve. Returns Type Description T RemoveFirst() Removes the first item from the heap and sorts the heap. Declaration public T RemoveFirst() Returns Type Description T The first item in the heap. UpdateItem(T) Updates the heap position of the item given. Declaration public void UpdateItem(T item) Parameters Type Name Description T item The item to update the position for."
  },
  "api/Global.HoverTip.html": {
    "href": "api/Global.HoverTip.html",
    "title": "Class HoverTip | Project documentation",
    "keywords": "Class HoverTip Enables game objects to have text displayed providing useful information when hovered over. Written by following this tutorial. Inheritance Object HoverTip Implements IPointerEnterHandler IPointerExitHandler Namespace : Global Assembly : cs.temp.dll.dll Syntax public class HoverTip : MonoBehaviour Remarks This custom component is given to user interface game object, and is given an associated text to be displayed when the object is hovered over. The IPointerEnterHandler and IPointerExitHandler are used to detect when the mouse enter and exits the gameobject associated with the HoverTip instance. Fields tipToShow The tip text to be displayed in the tip window for the associated object Declaration public string tipToShow Field Value Type Description String Methods OnPointerEnter(PointerEventData) Called when the associated gameobject is entered. Declaration public void OnPointerEnter(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Provides detailed information about the pointer enter event. OnPointerExit(PointerEventData) Called when the associated gameobject is exited. Declaration public void OnPointerExit(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Provides detailed information about the pointer exit event. Implements IPointerEnterHandler IPointerExitHandler"
  },
  "api/Global.HoverTipManager.html": {
    "href": "api/Global.HoverTipManager.html",
    "title": "Class HoverTipManager | Project documentation",
    "keywords": "Class HoverTipManager This class is responsible for managing the functionality of the hovetip. Written by following this tutorial. Inheritance Object HoverTipManager Namespace : Global Assembly : cs.temp.dll.dll Syntax public class HoverTipManager : MonoBehaviour Fields onMouseHover Delegate for response to the mouse hover over a element. Declaration public static Action<string, Vector2> onMouseHover Field Value Type Description Action < String , Vector2 > onMouseLoseFocus Delegate for response to the mouse no longer hovering over a element. Declaration public static Action onMouseLoseFocus Field Value Type Description Action"
  },
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace Global | Project documentation",
    "keywords": "Namespace Global Classes Cell Represents a single space on the map for a tile to be potentially placed. CellPair Represents the start and end cell of a path. Heap<T> A binary heap written by Sebastian Lague. Heap video HoverTip Enables game objects to have text displayed providing useful information when hovered over. Written by following this tutorial. HoverTipManager This class is responsible for managing the functionality of the hovetip. Written by following this tutorial. LakeGenerator Responsible for creating the lakes in the level. LakeOptions Contains the options for lake generation. Level Handles all aspects to do with the level. LevelCameraController Controls the level camera's functionality that is used in the user interface. LevelEditor Responsible for customising the LevelManager inspector window to allow level generation via the inspector. LevelManager Responsible for all operations to do with the level and the player. Used by the UIManager (generation in project build) and the LevelEditor (generation in unity editor). Map Describes the layout of the level. Set by the generators, and then used to populate the tilemaps. Options Used to manage user interface elements for a generator. PathGenerator Responsible for creating all path related elements in the level. PlayerController This class is responsible for controlling the player character on the level. PopupManager Called by the user interface to show and hide popups with custom heading and body text. RiverGenerator Responsible for creating the rivers in the level. RiverOptions Used to manage user interface elements for the river generator. TerrainGenerator Responsible for generating the terrain. TerrainOptions Used to manage user interface elements for the terrain generator. TerrainSettings Holds the settings used for terrain generation. UIManager This class is responsible for managing all operations to do with the user interface. WalkpathGenerator Responsible for creating the walkpaths in the level. WalkpathPathOptions Used to manage user interface elements for the walkpath generator. Structs LakeSettings The settings to be used for lake generation. RiverSettings Holds the settings used for river generation. WalkpathSettings Holds the settings used for walkpath generation. Interfaces IHeapItem<T> An interface to make items in the heap required to store an index which will then be compared by priority for ordering. Enums Cell.CellStatus Enumeration of cell states. Used to distinguish the various cells from eachother. LakeGenerator.MaxLakeSize The scale for maximum size of a lake, relative to the level size. LakeGenerator.NumberOfLakes The scale for amount of lakes, relative to the level size. RiverGenerator.NumberOfRivers The scale for amount of rivers, relative to the level size. TerrainGenerator.TerrainShape The options for the terrain shape. TerrainGenerator.TerrainType The options for the terrain type. WalkpathGenerator.NumberOfWalkpaths The scale for amount of walkpaths, relative to the level size."
  },
  "api/Global.IHeapItem-1.html": {
    "href": "api/Global.IHeapItem-1.html",
    "title": "Interface IHeapItem<T> | Project documentation",
    "keywords": "Interface IHeapItem<T> An interface to make items in the heap required to store an index which will then be compared by priority for ordering. Namespace : Global Assembly : cs.temp.dll.dll Syntax public interface IHeapItem<T> Type Parameters Name Description T The type of object to be sorted in the heap. Properties HeapIndex Getter and setter for the heap index. Declaration int HeapIndex { get; set; } Property Value Type Description Int32"
  },
  "api/Global.LakeGenerator.html": {
    "href": "api/Global.LakeGenerator.html",
    "title": "Class LakeGenerator | Project documentation",
    "keywords": "Class LakeGenerator Responsible for creating the lakes in the level. Inheritance Object LakeGenerator Namespace : Global Assembly : cs.temp.dll.dll Syntax public class LakeGenerator Constructors LakeGenerator(SpriteAtlas, List<String>) The constructor for the LakeGenerator. Sets all the tiles according to their types, and set the reference to the level generation info. Declaration public LakeGenerator(SpriteAtlas atlas, List<string> generationInfo) Parameters Type Name Description SpriteAtlas atlas A SpriteAtlas, holding all the sprites for the project. List < String > generationInfo A reference to the level generation information for the level. Fields maxLakeSizeCount The number of options in the MaxLakeSize enumeration. Declaration public static int maxLakeSizeCount Field Value Type Description Int32 numberOfLakesCount The number of options in the NumberOfLakes enumeration. Declaration public static int numberOfLakesCount Field Value Type Description Int32 Methods getTile() Gets the lake tile to be used based on the type of terrain. Declaration public Tile getTile() Returns Type Description Tile The lake tile. populateCells(Map) Update the map by adding the lakes. Declaration public void populateCells(Map map) Parameters Type Name Description Map map A reference to the Map object, which represents the state of all cells in the level. setLakeSettings(LakeSettings) Set the reference to the lake settings. Declaration public void setLakeSettings(LakeSettings lakeSettings) Parameters Type Name Description LakeSettings lakeSettings The lake settings to set a reference to."
  },
  "api/Global.LakeGenerator.MaxLakeSize.html": {
    "href": "api/Global.LakeGenerator.MaxLakeSize.html",
    "title": "Enum LakeGenerator.MaxLakeSize | Project documentation",
    "keywords": "Enum LakeGenerator.MaxLakeSize The scale for maximum size of a lake, relative to the level size. Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum MaxLakeSize Fields Name Description Large Medium Small"
  },
  "api/Global.LakeGenerator.NumberOfLakes.html": {
    "href": "api/Global.LakeGenerator.NumberOfLakes.html",
    "title": "Enum LakeGenerator.NumberOfLakes | Project documentation",
    "keywords": "Enum LakeGenerator.NumberOfLakes The scale for amount of lakes, relative to the level size. Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum NumberOfLakes Fields Name Description High Low Medium"
  },
  "api/Global.LakeOptions.html": {
    "href": "api/Global.LakeOptions.html",
    "title": "Class LakeOptions | Project documentation",
    "keywords": "Class LakeOptions Contains the options for lake generation. Inheritance Object Options LakeOptions Inherited Members Options.sliders Options.inputFields Options.dropdowns Options.toggles Options.toggleOptions Options.terrainType Options.setupSlider(Slider, InputField, Int32, Int32) Options.setupDropdown(Dropdown, List<String>) Options.updateInputField(Slider, InputField) Options.updateSlider(InputField, Slider) Options.setupToggleWithOption(Toggle, GameObject) Options.toggleOption(Toggle, GameObject) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class LakeOptions : Options Methods createUserSettingsFromOptions() Creates the user lake settings from the options given. Declaration public LakeSettings createUserSettingsFromOptions() Returns Type Description LakeSettings The lake settings from the options. setupUIElements() Setup the lake generation ui elements. Declaration public void setupUIElements() updateFields(LakeSettings) Update the user interface options with the settings used for lake generation. Declaration public void updateFields(LakeSettings settings) Parameters Type Name Description LakeSettings settings The settings used for lake generation."
  },
  "api/Global.LakeSettings.html": {
    "href": "api/Global.LakeSettings.html",
    "title": "Struct LakeSettings | Project documentation",
    "keywords": "Struct LakeSettings The settings to be used for lake generation. Namespace : Global Assembly : cs.temp.dll.dll Syntax public struct LakeSettings Constructors LakeSettings(TerrainGenerator.TerrainType) The constructor for the lake randomised settings. Sets all variables. Declaration public LakeSettings(TerrainGenerator.TerrainType tType) Parameters Type Name Description TerrainGenerator.TerrainType tType The type of terrain. LakeSettings(TerrainGenerator.TerrainType, Boolean, LakeGenerator.NumberOfLakes, LakeGenerator.MaxLakeSize) The constructor for the lake user settings. Sets all variables. Declaration public LakeSettings(TerrainGenerator.TerrainType tType, bool lGenerationEnabled, LakeGenerator.NumberOfLakes lNum, LakeGenerator.MaxLakeSize lMaxSize) Parameters Type Name Description TerrainGenerator.TerrainType tType The type of terrain. Boolean lGenerationEnabled Whether lake generation is enabled. LakeGenerator.NumberOfLakes lNum The scale for the number of lakes. LakeGenerator.MaxLakeSize lMaxSize The scale for the maximum lake size. Fields lGenerationEnabled Whether lake generation is enabled. Declaration public readonly bool lGenerationEnabled Field Value Type Description Boolean lMaxSize The scale for the maximum lake size. Declaration public readonly LakeGenerator.MaxLakeSize lMaxSize Field Value Type Description LakeGenerator.MaxLakeSize lNum The scale for the number of lakes. Declaration public readonly LakeGenerator.NumberOfLakes lNum Field Value Type Description LakeGenerator.NumberOfLakes tType The type of terrain. Declaration public readonly TerrainGenerator.TerrainType tType Field Value Type Description TerrainGenerator.TerrainType"
  },
  "api/Global.Level.html": {
    "href": "api/Global.Level.html",
    "title": "Class Level | Project documentation",
    "keywords": "Class Level Handles all aspects to do with the level. Inheritance Object Level Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Level : MonoBehaviour Methods clear() Clear the level and its componenets. Declaration public void clear() generate(TerrainSettings, RiverSettings, LakeSettings, WalkpathSettings) Responsible for generating the level. It uses the settings to determine how the level is generated. Declaration public void generate(TerrainSettings terrainSettings, RiverSettings riverSettings, LakeSettings lakeSettings, WalkpathSettings walkpathSettings) Parameters Type Name Description TerrainSettings terrainSettings The settings for the terrain generator. RiverSettings riverSettings The settings for the river generator. LakeSettings lakeSettings The settings for the lake generator. WalkpathSettings walkpathSettings The settings for the walkpath generator. getGenerationInfo() Get all the level generation information. Declaration public List<string> getGenerationInfo() Returns Type Description List < String > A list of level generation steps. getGridWorldPosition(Vector2Int) Get the world position of a cell on the map. Declaration public Vector2 getGridWorldPosition(Vector2Int cellPosition) Parameters Type Name Description Vector2Int cellPosition The cell to get the world position for. Returns Type Description Vector2 The world position of the cell. getMapZPosition(Vector2) Get the z position (depth) at the x,y world position on the map Declaration public int getMapZPosition(Vector2 worldPos) Parameters Type Name Description Vector2 worldPos The world position to find the z value for. Returns Type Description Int32 The z position (depth) of the world position. getRandomTerrainCellPosition() Get a random terrain cell position from the map. Declaration public Vector3Int getRandomTerrainCellPosition() Returns Type Description Vector3Int The position of a terrain cell. setCameraActive(Boolean) Set the active status of the level camera. Declaration public void setCameraActive(bool value) Parameters Type Name Description Boolean value The value to set the level cameras active status to. setup(Boolean) Used to setup the level and its components. Declaration public void setup(bool fromInspector = false) Parameters Type Name Description Boolean fromInspector Whether or not a call is from the inspector."
  },
  "api/Global.LevelCameraController.html": {
    "href": "api/Global.LevelCameraController.html",
    "title": "Class LevelCameraController | Project documentation",
    "keywords": "Class LevelCameraController Controls the level camera's functionality that is used in the user interface. Inheritance Object LevelCameraController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class LevelCameraController : MonoBehaviour Methods clickAndDrag() Functionality that uses the mouse as input to click and drag the level camera into position. Declaration public void clickAndDrag() recenterCamera() Recenter the camera around the level generated. Declaration public void recenterCamera() scrollZoom() functionality to zoom the level camera using a mouse scrollwheel. zoom out, and ortho size increases, zoom in and ortho size decreases Declaration public void scrollZoom() setOriginalMouseDownPosition() Setter for the originalMouseDownPosition, used by the UIManager Declaration public void setOriginalMouseDownPosition() updateCamera(Vector3, Single) Updates the values important for the camera to be position correctly relative to the level generated. Called after a level is generated. Declaration public void updateCamera(Vector3 newlevelCenter, float newOrthoSize) Parameters Type Name Description Vector3 newlevelCenter The center of the new level generated. Single newOrthoSize The new size of the orthographic camera window zoomIn() Zoom into the level generated Declaration public void zoomIn() zoomOut() Zoom out of the level generated Declaration public void zoomOut()"
  },
  "api/Global.LevelEditor.html": {
    "href": "api/Global.LevelEditor.html",
    "title": "Class LevelEditor | Project documentation",
    "keywords": "Class LevelEditor Responsible for customising the LevelManager inspector window to allow level generation via the inspector. Inheritance Object LevelEditor Namespace : Global Assembly : cs.temp.dll.dll Syntax public class LevelEditor : Editor Methods OnInspectorGUI() Function from built in editor class. Implemented to make the custom inspector, adding custom GUI elements. Declaration public override void OnInspectorGUI()"
  },
  "api/Global.LevelManager.html": {
    "href": "api/Global.LevelManager.html",
    "title": "Class LevelManager | Project documentation",
    "keywords": "Class LevelManager Responsible for all operations to do with the level and the player. Used by the UIManager (generation in project build) and the LevelEditor (generation in unity editor). Inheritance Object LevelManager Namespace : Global Assembly : cs.temp.dll.dll Syntax public class LevelManager : MonoBehaviour Methods clearLevel() Clear the level. Declaration public void clearLevel() generate(TerrainSettings, RiverSettings, LakeSettings, WalkpathSettings) Generate the level with the given settings. Passes the settings onto level. Declaration public void generate(TerrainSettings terrainSettings, RiverSettings riverSettings, LakeSettings lakeSettings, WalkpathSettings walkpathSettings) Parameters Type Name Description TerrainSettings terrainSettings The settings for the terrain generator. RiverSettings riverSettings The settings for the river generator. LakeSettings lakeSettings The settings for the lake generator. WalkpathSettings walkpathSettings The settings for the walkpath generator getGenerationInfo() Get the level generation information from the level. Declaration public List<string> getGenerationInfo() Returns Type Description List < String > The level generation steps. getMapZPosition(Vector2) Get the z position from the map at the given world position from level. Declaration public int getMapZPosition(Vector2 worldPos) Parameters Type Name Description Vector2 worldPos The world position to get the map z value for. Returns Type Description Int32 The z position at the world position on the map. setLevelCameraActive(Boolean) Used by the UI manager to update the level camera's active status when swapping between level generation and demo user interfaces. Declaration public void setLevelCameraActive(bool value) Parameters Type Name Description Boolean value The boolean value to set the level camera's active status to. setPlayerActive(Boolean) Used by the UI manager to update the player's active status when swapping between level generation and demo user interfaces. Declaration public void setPlayerActive(bool value) Parameters Type Name Description Boolean value The boolean value to set the player's active status to. setupLevelFromInspector() Calls the setup function from the level as the inspector (by setting isFromInspector bool to true). Declaration public void setupLevelFromInspector() setupPlayer() Instantiate the player (if they are not already) and put them into the level at a random position. Declaration public void setupPlayer()"
  },
  "api/Global.Map.html": {
    "href": "api/Global.Map.html",
    "title": "Class Map | Project documentation",
    "keywords": "Class Map Describes the layout of the level. Set by the generators, and then used to populate the tilemaps. Inheritance Object Map Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Map Constructors Map(Int32, Int32, TerrainGenerator.TerrainShape, Cell.CellStatus) Constructor for the Map. Fills the map with new cells with the given status (optional). Declaration public Map(int mapWidth, int mapHeight, TerrainGenerator.TerrainShape shape, Cell.CellStatus status = Cell.CellStatus.ValidCell) Parameters Type Name Description Int32 mapWidth The width of the map's 2D array. Int32 mapHeight The height of the map's 2D array. TerrainGenerator.TerrainShape shape The shape of the map's terrain. Cell.CellStatus status The status to set all cells to initially. Fields area The maps width multiplied by the maps height. Declaration public readonly int area Field Value Type Description Int32 height The height of the map's 2D array. Declaration public readonly int height Field Value Type Description Int32 shape The shape of the map's terrain. Declaration public readonly TerrainGenerator.TerrainShape shape Field Value Type Description TerrainGenerator.TerrainShape width The width of the map's 2D array. Declaration public readonly int width Field Value Type Description Int32 Properties terrainCellCount Getter and setter for the current number of terrain cells on the map. Declaration public int terrainCellCount { get; } Property Value Type Description Int32 Methods checkForBoundaryCell(Cell) Check if a given cell on a square or rectangular map is a boundary cell. Declaration public void checkForBoundaryCell(Cell cell) Parameters Type Name Description Cell cell The cell to be checked. checkForBoundaryCellRandom(Cell) Check if a given cell on a randomly shaped map is a boundary cell. Declaration public void checkForBoundaryCellRandom(Cell cell) Parameters Type Name Description Cell cell The cell to be checked. getBoundaryCellPositions() Get the list of boundary cell positions. Declaration public List<Vector2Int> getBoundaryCellPositions() Returns Type Description List < Vector2Int > The list of boundary cell positions. getCell(Int32, Int32) Get a cell from the map at the given x and y int positions. Declaration public Cell getCell(int x, int y) Parameters Type Name Description Int32 x The x position of the cell. Int32 y The y position of the cell. Returns Type Description Cell getCell(Vector2Int) Get a cell from the map at the given Vector2Int position. Declaration public Cell getCell(Vector2Int cellPosition) Parameters Type Name Description Vector2Int cellPosition The postion of the cell in VectorInt format. Returns Type Description Cell The cell at the position. getMinDepth(Cell, Boolean) Finds the minimum depth (z value) from the cells surrounding the cell given. Declaration public int getMinDepth(Cell currentCell, bool onlyTerrainCells = false) Parameters Type Name Description Cell currentCell The cell to find the minimum depth for. Boolean onlyTerrainCells Whether or not only terrain cells should be checked. Returns Type Description Int32 The minimum depth amongst the cell and its neighbours. getNeighbours(Cell) Retrieve the von Neumann neighborhood neighbours of the cells given at a manhattan distance of 1. Declaration public List<Cell> getNeighbours(Cell currentCell) Parameters Type Name Description Cell currentCell The cell to get the neighbours for. Returns Type Description List < Cell > The list of all neighbouring cells. getRandomTerrainCellPosition() Get a random terrain cells position. Declaration public Vector3Int getRandomTerrainCellPosition() Returns Type Description Vector3Int A random terrain cell position. isValidCellPosition(Vector2Int) Checks whether the given position is a free terrain cell not on any bound. Declaration public bool isValidCellPosition(Vector2Int position) Parameters Type Name Description Vector2Int position The position to be checked. Returns Type Description Boolean Whether or not the there is a valid cell at the given position. updateBoundaryCellPositionList(List<Vector2Int>) Update the list of boundary cells with a modified list. Declaration public void updateBoundaryCellPositionList(List<Vector2Int> newboundaryCellPositions) Parameters Type Name Description List < Vector2Int > newboundaryCellPositions The new list of boundary cell positions. updateCellStatus(Cell, Cell.CellStatus, Boolean) Update the given cells status to a new status, and optinally specify whether intersections are on for cells along paths. Declaration public void updateCellStatus(Cell currentCell, Cell.CellStatus status, bool intersectionsEnabled = false) Parameters Type Name Description Cell currentCell The cell to be updated. Cell.CellStatus status The new status. Boolean intersectionsEnabled Whether or not a cell can be intersected. Used for path generation."
  },
  "api/Global.Options.html": {
    "href": "api/Global.Options.html",
    "title": "Class Options | Project documentation",
    "keywords": "Class Options Used to manage user interface elements for a generator. Inheritance Object Options LakeOptions RiverOptions TerrainOptions WalkpathPathOptions Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Options Fields dropdowns The dropdown elements. Declaration protected List<Dropdown> dropdowns Field Value Type Description List < Dropdown > inputFields The input field elements. Declaration protected List<InputField> inputFields Field Value Type Description List < InputField > sliders The sliders elements. Declaration protected List<Slider> sliders Field Value Type Description List < Slider > terrainType All options need to know the terrain type. Declaration protected static TerrainGenerator.TerrainType terrainType Field Value Type Description TerrainGenerator.TerrainType toggleOptions The game objects containing options to be enabled/disabled by a corresponding toggle. Declaration protected List<GameObject> toggleOptions Field Value Type Description List < GameObject > toggles The toggle elements. Declaration protected List<Toggle> toggles Field Value Type Description List < Toggle > Methods setupDropdown(Dropdown, List<String>) Common setup tasks to be done for dropdowns. Declaration protected void setupDropdown(Dropdown dropdown, List<string> options) Parameters Type Name Description Dropdown dropdown The dropdown to be setup. List < String > options The options to be added to the dropdown element. setupSlider(Slider, InputField, Int32, Int32) Common setup tasks to be done for sliders. Declaration protected void setupSlider(Slider slider, InputField input, int minValue, int maxValue) Parameters Type Name Description Slider slider The slider to be setup. InputField input The corresponding input field for the slider. Shows the slider value and can modify it. Int32 minValue The minimum possible value for the slider. Int32 maxValue The maximum possible value for the slider. setupToggleWithOption(Toggle, GameObject) Common setup tasks to be done for toggles which enabled/disable a set of options. Declaration protected void setupToggleWithOption(Toggle toggle, GameObject optionPanel) Parameters Type Name Description Toggle toggle The toggle to be setup. GameObject optionPanel The options panel whose active state is affected by the toggle. toggleOption(Toggle, GameObject) Called by the toggle's on value changed event when the toggle is enabled or disabled. Changes the state of the toggle's corresponding options panel. Declaration public void toggleOption(Toggle toggle, GameObject optionPanel) Parameters Type Name Description Toggle toggle The toggle which called the method. GameObject optionPanel The options panel whose active state is affected by the toggle. updateInputField(Slider, InputField) Called by the sliders onValueChanged event to update the corresponding input field with the sliders value when it is changed. Declaration public void updateInputField(Slider slider, InputField input) Parameters Type Name Description Slider slider The slider which called the method. InputField input The slider's corresponding input field. updateSlider(InputField, Slider) Called by the input fields onEndEdit event to ensure the input is valid and the slider matches the input field value. Declaration public void updateSlider(InputField input, Slider slider) Parameters Type Name Description InputField input The input field which called the method. Slider slider The input field's corresponding slider."
  },
  "api/Global.PathGenerator.html": {
    "href": "api/Global.PathGenerator.html",
    "title": "Class PathGenerator | Project documentation",
    "keywords": "Class PathGenerator Responsible for creating all path related elements in the level. Inheritance Object PathGenerator RiverGenerator WalkpathGenerator Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PathGenerator Fields statusToCheck Declaration protected Cell.CellStatus statusToCheck Field Value Type Description Cell.CellStatus Methods createPaths(Map, Int32, Boolean, Cell.CellStatus) Declaration protected int createPaths(Map map, int maxCount, bool intersectionsEnabled, Cell.CellStatus type) Parameters Type Name Description Map map Int32 maxCount Boolean intersectionsEnabled Cell.CellStatus type Returns Type Description Int32 findAStarPath(Map, Cell, Cell, Cell.CellStatus, Boolean) Based on the a* algorithm. Used to find a path between a pair of cells. Declaration protected bool findAStarPath(Map map, Cell startCell, Cell endCell, Cell.CellStatus status, bool intersectionsEnabled) Parameters Type Name Description Map map The map to find the path on. Cell startCell The start of the path. Cell endCell The end goal of the path. Cell.CellStatus status Defines the type of path to be generated. Boolean intersectionsEnabled Whether or not intersections are enabled for the path. Returns Type Description Boolean Whether or not the path was generated. getReachableCells(Map, Heap<CellPair>, Boolean) Gets a pair of start and end cells for which a path can be generated. Declaration protected CellPair getReachableCells(Map map, Heap<CellPair> existingCellPairs, bool intersectionsEnabled) Parameters Type Name Description Map map The levels 2D array of cells. Heap < CellPair > existingCellPairs The current chosen cell pairs. Used to ensure paths do not cross if intersections are disabled. Boolean intersectionsEnabled Whether or not intersections are enabled. Returns Type Description CellPair A pair of start and end cells for which a path can be generated."
  },
  "api/Global.PlayerController.html": {
    "href": "api/Global.PlayerController.html",
    "title": "Class PlayerController | Project documentation",
    "keywords": "Class PlayerController This class is responsible for controlling the player character on the level. Inheritance Object PlayerController Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PlayerController : MonoBehaviour Methods setDoMovement(Boolean) Sets the doMovement action in the controller based on the state of the rangeHeightEnabled flag. Declaration public void setDoMovement(bool rangeHeightEnabled) Parameters Type Name Description Boolean rangeHeightEnabled Whether or not height variation is on. setLevelManager(LevelManager) Set a referene to the level manager in the controller. Declaration public void setLevelManager(LevelManager levelManager) Parameters Type Name Description LevelManager levelManager The level manager to be referenced. setPlayerPosition(Vector2, Int32) Place the place at the given position and at the given depth. Declaration public void setPlayerPosition(Vector2 newWorldPosition, int zValueOnMap) Parameters Type Name Description Vector2 newWorldPosition The new position to place the player. Int32 zValueOnMap The new depth of the player on the map."
  },
  "api/Global.PopupManager.html": {
    "href": "api/Global.PopupManager.html",
    "title": "Class PopupManager | Project documentation",
    "keywords": "Class PopupManager Called by the user interface to show and hide popups with custom heading and body text. Inheritance Object PopupManager Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PopupManager : MonoBehaviour Methods hidePopup() Deactivates the popup. Declaration public void hidePopup() showPopup(String, String) Activates the popup with the given heading and body text. Declaration public void showPopup(string messageHeading, string messageBody) Parameters Type Name Description String messageHeading The heading of the popup to be shown. String messageBody The body message of the popup to be shown."
  },
  "api/Global.RiverGenerator.html": {
    "href": "api/Global.RiverGenerator.html",
    "title": "Class RiverGenerator | Project documentation",
    "keywords": "Class RiverGenerator Responsible for creating the rivers in the level. Inheritance Object PathGenerator RiverGenerator Inherited Members PathGenerator.statusToCheck PathGenerator.getReachableCells(Map, Heap<CellPair>, Boolean) PathGenerator.findAStarPath(Map, Cell, Cell, Cell.CellStatus, Boolean) PathGenerator.createPaths(Map, Int32, Boolean, Cell.CellStatus) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class RiverGenerator : PathGenerator Constructors RiverGenerator(SpriteAtlas, List<String>) The constructor for the RiverGenerator. Sets all the tiles according to their types, and set the reference to the level generation info. Declaration public RiverGenerator(SpriteAtlas atlas, List<string> generationInfo) Parameters Type Name Description SpriteAtlas atlas A SpriteAtlas, holding all the sprites for the project. List < String > generationInfo A reference to the level generation information for the level. Fields numberOfRiversCount The number of options in the NumberOfRivers enumeration. Declaration public static int numberOfRiversCount Field Value Type Description Int32 Methods getTile() Gets the river tile to be used based on the type of terrain. Declaration public Tile getTile() Returns Type Description Tile The river tile. populateCells(Map) Update the map by adding the rivers. Declaration public void populateCells(Map map) Parameters Type Name Description Map map A reference to the Map object, which represents the state of all cells in the level. setRiverSettings(RiverSettings) Set the reference to the river settings. Declaration public void setRiverSettings(RiverSettings riverSettings) Parameters Type Name Description RiverSettings riverSettings The river settings to set a reference to."
  },
  "api/Global.RiverGenerator.NumberOfRivers.html": {
    "href": "api/Global.RiverGenerator.NumberOfRivers.html",
    "title": "Enum RiverGenerator.NumberOfRivers | Project documentation",
    "keywords": "Enum RiverGenerator.NumberOfRivers The scale for amount of rivers, relative to the level size. Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum NumberOfRivers Fields Name Description High Low Medium"
  },
  "api/Global.RiverOptions.html": {
    "href": "api/Global.RiverOptions.html",
    "title": "Class RiverOptions | Project documentation",
    "keywords": "Class RiverOptions Used to manage user interface elements for the river generator. Inheritance Object Options RiverOptions Inherited Members Options.sliders Options.inputFields Options.dropdowns Options.toggles Options.toggleOptions Options.terrainType Options.setupSlider(Slider, InputField, Int32, Int32) Options.setupDropdown(Dropdown, List<String>) Options.updateInputField(Slider, InputField) Options.updateSlider(InputField, Slider) Options.setupToggleWithOption(Toggle, GameObject) Options.toggleOption(Toggle, GameObject) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class RiverOptions : Options Methods createUserSettingsFromOptions() Create the river settings from the river options. Declaration public RiverSettings createUserSettingsFromOptions() Returns Type Description RiverSettings The river setttings. setupUIElements() Setup the user interface elements for the river options. Declaration public void setupUIElements() updateFields(RiverSettings) Update the user interface options with the settings used for river generation. Declaration public void updateFields(RiverSettings settings) Parameters Type Name Description RiverSettings settings The settings used for river generation."
  },
  "api/Global.RiverSettings.html": {
    "href": "api/Global.RiverSettings.html",
    "title": "Struct RiverSettings | Project documentation",
    "keywords": "Struct RiverSettings Holds the settings used for river generation. Namespace : Global Assembly : cs.temp.dll.dll Syntax public struct RiverSettings Constructors RiverSettings(TerrainGenerator.TerrainType) Constructor for RiverSettings. Responsible for setting all the varables randomly (except the terrain type). Declaration public RiverSettings(TerrainGenerator.TerrainType tType) Parameters Type Name Description TerrainGenerator.TerrainType tType The type of terrain to be generated. RiverSettings(TerrainGenerator.TerrainType, Boolean, RiverGenerator.NumberOfRivers, Boolean) Constructor for RiverSettings. Responsible for setting all the varables from user options. Declaration public RiverSettings(TerrainGenerator.TerrainType tType, bool rGenerationEnabled, RiverGenerator.NumberOfRivers rNum, bool intersectionsEnabled) Parameters Type Name Description TerrainGenerator.TerrainType tType The type of terrain to be generated. Boolean rGenerationEnabled Turn on or off the creation of rivers. RiverGenerator.NumberOfRivers rNum The number of rivers relative to the remaining terrain size. Boolean intersectionsEnabled Turn on or off whether rivers are able to cross paths. Fields intersectionsEnabled Turn on or off whether rivers are able to cross paths. Declaration public readonly bool intersectionsEnabled Field Value Type Description Boolean rGenerationEnabled Turn on or off the creation of rivers. Declaration public readonly bool rGenerationEnabled Field Value Type Description Boolean rNum The number of rivers relative to the remaining terrain size. Declaration public readonly RiverGenerator.NumberOfRivers rNum Field Value Type Description RiverGenerator.NumberOfRivers tType The type of terrain to be generated. Declaration public readonly TerrainGenerator.TerrainType tType Field Value Type Description TerrainGenerator.TerrainType"
  },
  "api/Global.TerrainGenerator.html": {
    "href": "api/Global.TerrainGenerator.html",
    "title": "Class TerrainGenerator | Project documentation",
    "keywords": "Class TerrainGenerator Responsible for generating the terrain. Inheritance Object TerrainGenerator Namespace : Global Assembly : cs.temp.dll.dll Syntax public class TerrainGenerator Constructors TerrainGenerator(SpriteAtlas, List<String>) The constructor for the TerrainGenerator. Sets all the tiles according to their types, and set the reference to the level generation info. Declaration public TerrainGenerator(SpriteAtlas atlas, List<string> generationInfo) Parameters Type Name Description SpriteAtlas atlas A SpriteAtlas, holding all the sprites for the project. List < String > generationInfo A reference to the level generation information for the level. Fields terrainMaxHeight The maximum possible height of the terrain. Declaration public const int terrainMaxHeight = 5 Field Value Type Description Int32 terrainMaxSize The maximum possible size of a level specified by tile count. Declaration public const int terrainMaxSize = 2000 Field Value Type Description Int32 terrainMinHeight The minimum possible height of the terrain. Declaration public const int terrainMinHeight = 0 Field Value Type Description Int32 terrainMinSize The minimum possible size of a level specified by tile count. Declaration public const int terrainMinSize = 150 Field Value Type Description Int32 terrainShapeCount The number of options in the TerrainShape enumeration. Declaration public static int terrainShapeCount Field Value Type Description Int32 terrainTypeCount The number of options in the TerrainType enumeration. Declaration public static int terrainTypeCount Field Value Type Description Int32 Methods createMap() Create the level map based on the terrain shape selected. Declaration public Map createMap() Returns Type Description Map The level map. getAccessoryTiles() Get the accessory tiles for the terrain type selected. Declaration public Tile[] getAccessoryTiles() Returns Type Description Tile [] The terrains accessory tiles. getGroundTiles() Get the ground tiles for the terrain type selected. Declaration public Tile[] getGroundTiles() Returns Type Description Tile [] The terrains ground tiles. getLowerGroundTile() Get the lower ground tile for the terrain type selected. Declaration public Tile getLowerGroundTile() Returns Type Description Tile The terrains lower ground tile. populateCells(Map) Update the map by adding the terrain cells. Declaration public void populateCells(Map map) Parameters Type Name Description Map map A reference to the Map object, which represents the state of all cells in the level. setOuterBounds(Map, List<Vector3Int>, List<TileBase>, List<Vector3Int>, List<TileBase>) Finds all the outer boundarys of the terrain. Used to limit player movement to only be on the generated level. Declaration public void setOuterBounds(Map map, List<Vector3Int> positions, List<TileBase> tiles, List<Vector3Int> positions2, List<TileBase> tiles2) Parameters Type Name Description Map map A reference to the Map object, which represents the state of all cells in the level. List < Vector3Int > positions List of outer bound positions for the first outer bounds tilemap. List < TileBase > tiles List of outer bound tiles for the first outer bounds tilemap. List < Vector3Int > positions2 List of outer bound positions for the second outer bounds tilemap. List < TileBase > tiles2 List of outer bound tiles for the second outer bounds tilemap. setTerrainSettings(TerrainSettings) Set the reference to the terrain settings. Declaration public void setTerrainSettings(TerrainSettings terrainSettings) Parameters Type Name Description TerrainSettings terrainSettings The terrain settings to set a reference to."
  },
  "api/Global.TerrainGenerator.TerrainShape.html": {
    "href": "api/Global.TerrainGenerator.TerrainShape.html",
    "title": "Enum TerrainGenerator.TerrainShape | Project documentation",
    "keywords": "Enum TerrainGenerator.TerrainShape The options for the terrain shape. Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum TerrainShape Fields Name Description Random Rectangle Square"
  },
  "api/Global.TerrainGenerator.TerrainType.html": {
    "href": "api/Global.TerrainGenerator.TerrainType.html",
    "title": "Enum TerrainGenerator.TerrainType | Project documentation",
    "keywords": "Enum TerrainGenerator.TerrainType The options for the terrain type. Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum TerrainType Fields Name Description Desert Greenery Lava Skin Snow"
  },
  "api/Global.TerrainOptions.html": {
    "href": "api/Global.TerrainOptions.html",
    "title": "Class TerrainOptions | Project documentation",
    "keywords": "Class TerrainOptions Used to manage user interface elements for the terrain generator. Inheritance Object Options TerrainOptions Inherited Members Options.sliders Options.inputFields Options.dropdowns Options.toggles Options.toggleOptions Options.terrainType Options.setupSlider(Slider, InputField, Int32, Int32) Options.setupDropdown(Dropdown, List<String>) Options.updateInputField(Slider, InputField) Options.updateSlider(InputField, Slider) Options.setupToggleWithOption(Toggle, GameObject) Options.toggleOption(Toggle, GameObject) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class TerrainOptions : Options Methods createUserSettingsFromOptions() Create the terrain settings from the terrain options. Declaration public TerrainSettings createUserSettingsFromOptions() Returns Type Description TerrainSettings The terrain setttings. setupUIElements() Setup the user interface elements for the terrain options. Declaration public void setupUIElements() updateFields(TerrainSettings) Update the user interface options with the settings used for terrain generation Declaration public void updateFields(TerrainSettings settings) Parameters Type Name Description TerrainSettings settings The settings used for terrain generation. updateTerrainSizeField(Int32) Update the terrain size slider in the user interface with the setting used. Declaration public void updateTerrainSizeField(int size) Parameters Type Name Description Int32 size The actual size of the level generated."
  },
  "api/Global.TerrainSettings.html": {
    "href": "api/Global.TerrainSettings.html",
    "title": "Class TerrainSettings | Project documentation",
    "keywords": "Class TerrainSettings Holds the settings used for terrain generation. Inheritance Object TerrainSettings Namespace : Global Assembly : cs.temp.dll.dll Syntax public class TerrainSettings Constructors TerrainSettings() Constructor for TerrainSettings. Responsible for setting all the varables randomly. Declaration public TerrainSettings() TerrainSettings(TerrainGenerator.TerrainType, Boolean, Int32, TerrainGenerator.TerrainShape, Int32, Int32, Int32) Constructor for TerrainSettings. Responsible for setting all the varables from user options. Declaration public TerrainSettings(TerrainGenerator.TerrainType tType, bool heightRangeEnabled, int tSize, TerrainGenerator.TerrainShape tShape, int tMinHeight, int tMaxHeight, int tExactHeight) Parameters Type Name Description TerrainGenerator.TerrainType tType The type of terrain to be generated. Boolean heightRangeEnabled Determines if the exact height is used or the minimum and maximum height values. Int32 tSize The size of terrain. TerrainGenerator.TerrainShape tShape The shape of the terrain. Int32 tMinHeight The minimum possible height of the terrain. Int32 tMaxHeight The maximum possible height of the terrain. Int32 tExactHeight The exact height of the terrain. Used if height range is not enabled. Fields heightRangeEnabled Determines if the exact height is used or the minimum and maximum height values. Declaration public readonly bool heightRangeEnabled Field Value Type Description Boolean tExactHeight The exact height of the terrain. Used if height range is not enabled. Declaration public readonly int tExactHeight Field Value Type Description Int32 tMaxHeight The maximum possible height of the terrain. Declaration public readonly int tMaxHeight Field Value Type Description Int32 tMinHeight The minimum possible height of the terrain. Declaration public readonly int tMinHeight Field Value Type Description Int32 tShape The shape of the terrain. Declaration public readonly TerrainGenerator.TerrainShape tShape Field Value Type Description TerrainGenerator.TerrainShape tType The type of terrain to be generated. Declaration public readonly TerrainGenerator.TerrainType tType Field Value Type Description TerrainGenerator.TerrainType Properties tSize The size of terrain. Declaration public int tSize { get; } Property Value Type Description Int32 Methods heightRangeIsOnAndInvalid() Used to ensure that if the user has specified a range of height, the minimum value is less than the maximum value. Declaration public bool heightRangeIsOnAndInvalid() Returns Type Description Boolean Whether or not the height range is on and is set to valid values. updateTerrainSize(Int32) When the terrain is generated, the actual size of the level must be updated in the settings. Declaration public void updateTerrainSize(int tSize) Parameters Type Name Description Int32 tSize The actual terrain size used by the terrain generator."
  },
  "api/Global.UIManager.html": {
    "href": "api/Global.UIManager.html",
    "title": "Class UIManager | Project documentation",
    "keywords": "Class UIManager This class is responsible for managing all operations to do with the user interface. Inheritance Object UIManager Namespace : Global Assembly : cs.temp.dll.dll Syntax public class UIManager : MonoBehaviour Methods closePopup() Closes an opened popup. Used by the close button on the popup panel. Declaration public void closePopup() demoLevel() Switch to the demo mode for the level generated. Called when the demo level button is pressed. Declaration public void demoLevel() exitLevel() Returns the user back to the level generation user interface from the demo user interface. Called when the exit level button is pressed. Declaration public void exitLevel() generateLevel() Creates and validates the settings before calling the level manager to generate the level. Called when the generate level button is pressed. Declaration public void generateLevel() generateRandomLevel() Creates randomised settings before calling the level manager to generate the level with the randomised settings. Called when the randomise level button is pressed. Declaration public void generateRandomLevel() recenterCamera() Calls the level camera controller to be recentered around the level. Called when the recenter button is pressed. Declaration public void recenterCamera() showLevelInfo() Show the level generation information. Called when the level info button is pressed. Declaration public void showLevelInfo() zoomIn() Calls the level camera controller to zoom into the level. Called when the zoom in button is pressed. Declaration public void zoomIn() zoomOut() Calls the level camera controller to zoom out of the level. Called when the zoom out button is pressed. Declaration public void zoomOut()"
  },
  "api/Global.WalkpathGenerator.html": {
    "href": "api/Global.WalkpathGenerator.html",
    "title": "Class WalkpathGenerator | Project documentation",
    "keywords": "Class WalkpathGenerator Responsible for creating the walkpaths in the level. Inheritance Object PathGenerator WalkpathGenerator Inherited Members PathGenerator.statusToCheck PathGenerator.getReachableCells(Map, Heap<CellPair>, Boolean) PathGenerator.findAStarPath(Map, Cell, Cell, Cell.CellStatus, Boolean) PathGenerator.createPaths(Map, Int32, Boolean, Cell.CellStatus) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class WalkpathGenerator : PathGenerator Constructors WalkpathGenerator(SpriteAtlas, List<String>) The constructor for the WalkpathGenerator. Sets all the tiles according to their types, and set the reference to the level generation info. Declaration public WalkpathGenerator(SpriteAtlas atlas, List<string> generationInfo) Parameters Type Name Description SpriteAtlas atlas A SpriteAtlas, holding all the sprites for the project. List < String > generationInfo A reference to the level generation information for the level. Fields numberOfWalkpathsCount The number of options in the NumberOfWalkpaths enumeration. Declaration public static int numberOfWalkpathsCount Field Value Type Description Int32 Methods getTile() Gets the walkpath tile to be used based on the type of terrain. Declaration public Tile getTile() Returns Type Description Tile The walkpath tile. populateCells(Map) Update the map by adding the walkpaths. Declaration public void populateCells(Map map) Parameters Type Name Description Map map A reference to the Map object, which represents the state of all cells in the level. setWalkpathSettings(WalkpathSettings) Set the reference to the walkpath settings. Declaration public void setWalkpathSettings(WalkpathSettings walkpathSettings) Parameters Type Name Description WalkpathSettings walkpathSettings The walkpath settings to set a reference to."
  },
  "api/Global.WalkpathGenerator.NumberOfWalkpaths.html": {
    "href": "api/Global.WalkpathGenerator.NumberOfWalkpaths.html",
    "title": "Enum WalkpathGenerator.NumberOfWalkpaths | Project documentation",
    "keywords": "Enum WalkpathGenerator.NumberOfWalkpaths The scale for amount of walkpaths, relative to the level size. Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum NumberOfWalkpaths Fields Name Description High Low Medium"
  },
  "api/Global.WalkpathPathOptions.html": {
    "href": "api/Global.WalkpathPathOptions.html",
    "title": "Class WalkpathPathOptions | Project documentation",
    "keywords": "Class WalkpathPathOptions Used to manage user interface elements for the walkpath generator. Inheritance Object Options WalkpathPathOptions Inherited Members Options.sliders Options.inputFields Options.dropdowns Options.toggles Options.toggleOptions Options.terrainType Options.setupSlider(Slider, InputField, Int32, Int32) Options.setupDropdown(Dropdown, List<String>) Options.updateInputField(Slider, InputField) Options.updateSlider(InputField, Slider) Options.setupToggleWithOption(Toggle, GameObject) Options.toggleOption(Toggle, GameObject) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class WalkpathPathOptions : Options Methods createUserSettingsFromOptions() Create the walkpath settings from the walkpath options. Declaration public WalkpathSettings createUserSettingsFromOptions() Returns Type Description WalkpathSettings The walkpath setttings. setupUIElements() Setup the user interface elements for the walkpath options. Declaration public void setupUIElements() updateFields(WalkpathSettings) Update the user interface options with the settings used for walkpath generation. Declaration public void updateFields(WalkpathSettings settings) Parameters Type Name Description WalkpathSettings settings The settings used for walkpath generation."
  },
  "api/Global.WalkpathSettings.html": {
    "href": "api/Global.WalkpathSettings.html",
    "title": "Struct WalkpathSettings | Project documentation",
    "keywords": "Struct WalkpathSettings Holds the settings used for walkpath generation. Namespace : Global Assembly : cs.temp.dll.dll Syntax public struct WalkpathSettings Constructors WalkpathSettings(TerrainGenerator.TerrainType) Constructor for WalkpathSettings. Responsible for setting all the varables randomly (except the terrain type). Declaration public WalkpathSettings(TerrainGenerator.TerrainType tType) Parameters Type Name Description TerrainGenerator.TerrainType tType The type of terrain to be generated. WalkpathSettings(TerrainGenerator.TerrainType, Boolean, WalkpathGenerator.NumberOfWalkpaths, Boolean) Constructor for WalkpathSettings. Responsible for setting all the varables from user options. Declaration public WalkpathSettings(TerrainGenerator.TerrainType tType, bool wGenerationEnabled, WalkpathGenerator.NumberOfWalkpaths wNum, bool intersectionsEnabled) Parameters Type Name Description TerrainGenerator.TerrainType tType The type of terrain to be generated. Boolean wGenerationEnabled Turn on or off the creation of walkpaths. WalkpathGenerator.NumberOfWalkpaths wNum The number of walkpaths relative to the remaining terrain size. Boolean intersectionsEnabled Turn on or off whether walkpaths are able to cross paths. Fields intersectionsEnabled Turn on or off whether walkpaths are able to cross paths. Declaration public readonly bool intersectionsEnabled Field Value Type Description Boolean tType The type of terrain to be generated. Declaration public readonly TerrainGenerator.TerrainType tType Field Value Type Description TerrainGenerator.TerrainType wGenerationEnabled Turn on or off the creation of walkpaths. Declaration public readonly bool wGenerationEnabled Field Value Type Description Boolean wNum The number of walkpaths relative to the remaining terrain size. Declaration public readonly WalkpathGenerator.NumberOfWalkpaths wNum Field Value Type Description WalkpathGenerator.NumberOfWalkpaths"
  },
  "index.html": {
    "href": "index.html",
    "title": "2D Isometric Procedural Content Generation System in Unity | Project documentation",
    "keywords": "2D Isometric Procedural Content Generation System in Unity Explain what the project is here. Use the example below to apply correct formatting. !(./resources/PreviewScreenshot.png?raw=true \"Title\") !(./Documentation/resources/PreviewScreenshot.png?raw=true \"Title\") Welcome text here and overview. Click here for WebGL Online Version Level Generation Screen Controls Install DocFX . Copy the Documentation/ folder to your Unity project: . ├── Assets + ├── Documentation ├── Package ├── ProjectSettings └── README.md Edit the following properties in Documentation/docfx.json , keep the others as it is: { \"build\": { \"globalMetadata\": // Edit your documentation website info, see: https://dotnet.github.io/docfx/tutorial/docfx.exe_user_manual.html#322-reserved-metadata { \"_appTitle\": \"Example Unity documentation\", \"_appFooter\": \"Example Unity documentation\", \"_enableSearch\": true }, \"sitemap\": { \"baseUrl\": \"https://normanderwan.github.io/DocFxForUnity\" // The URL of your documentation website } } It's the configuration file of your documentation. See https://dotnet.github.io/docfx/tutorial/docfx.exe_user_manual.html#3-docfxjson-format for more details. Edit Documentation/filterConfig.yml : apiRules: - include: # The namespaces to generate uidRegex: ^Your\\.Namespace1 type: Namespace - include: uidRegex: ^Your\\.Namespace2 type: Namespace - exclude: uidRegex: .* # Every other namespaces are ignored type: Namespace It tells DocFX which namespaces you want to generate the documentation. See https://dotnet.github.io/docfx/tutorial/howto_filter_out_unwanted_apis_attributes.html for more details. Document your classes and methods. See https://docs.microsoft.com/en-us/dotnet/csharp/codedoc for more details. (Optional) Add your manual pages: Write a Markdown file for each page in Documentation/manual/ . Keep a list of these pages on Documentation/manual/toc.yml . (Optional) Add resources such as images: Copy them to Documentation/resources/ . Reference them on your docs or manual pages. See https://dotnet.github.io/docfx/tutorial/links_and_cross_references.html#link-to-a-file-using-relative-path for more details. (Optional) Document your namespaces: For each namespace, add a Assets/Scripts/Your/Namespace1/Your.Namespace1.md file: --- uid: Your.Namespace1 summary: Description of the Your.Namespace1 namespace. --- See https://dotnet.github.io/docfx/tutorial/intro_overwrite_files.html to know how it works. Generate your documentation: On a command line opened on your project, run: cp README.md Documentation/index.md docfx Documentation/docfx.json --serve The generated website will be visible at http://localhost:8080 . If you want to have a more similar look to the Unity documentation, see this UnityFX template for DocFX: https://github.com/code-beans/UnityFX . Generate automatically your documentation If you're using GitHub: Copy the .github/workflows/documentation.yml workflow to your Unity project: . + ├── .github + | └── workflows + | └── documentation.yml ├── Assets ├── Documentation ├── Package ├── ProjectSettings └── README.md Next push on main branch will build and deploy your documentation to https://<USERNAME>.github.io/<REPOSITORY>/ ! If you're using GitLab, use the provided .gitlab-ci.yml . Generated website is pushed to a public/ directory. See the GitLab Pages documentation for more details. Troubleshooting / FAQ DocFX outputs: Warning:[ExtractMetadata]No project detected for extracting metadata. Solution: On Unity, click Asset > Open C# Project to generate the required .csproj . DocFX outputs: Warning:[ExtractMetadata]No metadata is generated for Assembly-CSharp,Assembly-CSharp-Editor. Solution: Make sure your included your namespace in Documentation/filterConfig.yml : - include: uidRegex: ^Your\\.Namespace1 type: Namespace If you want to reference a specific version of Unity, change this line on your docfx.json : \"xref\": [ \"https://normanderwan.github.io/UnityXrefMaps/<version>/xrefmap.yml\" ], where <version> is a Unity version in the form of YYYY.x ( e.g. 2017.4, 2018.4, 2019.3). Disclaimer This repository is not sponsored by or affiliated with Unity Technologies or its affiliates. “Unity” is a trademark or registered trademark of Unity Technologies or its affiliates in the U.S. and elsewhere."
  }
}